import pandas as pd


def getFullPlayerStats(year: int):
    # Returns a Dataframe containing all player stat totals for the specified year.

    player_stats = pd.read_html(f"https://afltables.com/afl/stats/{year}.html")
    clean_dfs = []
    for x in player_stats[1:]:
        x["team"] = str(x.columns[0][0]).split(" [")[0]
        x.columns = x.columns.droplevel(0)
        x = x.rename(columns={"": "Team"})[:-1]
        clean_dfs.append(x)
    full_player_stats = (pd.concat(clean_dfs)).fillna(0).reset_index(drop=True)
    full_player_stats["Player"] = [
        " ".join([x.split(", ")[1], x.split(", ")[0]])
        for x in full_player_stats["Player"]
    ]
    full_player_stats = addAgeColumns(full_player_stats, year)
    return full_player_stats


def getAllDOBAndDebuts(full_historical_data: bool = False):
    # Returns a Dataframe containing all players by name, DOB, and debut date.
    # Defaults to debuts after 2000 unless overridden using the full_historical_data flag.

    df = pd.read_fwf(
        "https://afltables.com/afl/stats/biglists/bg10.txt",
        widths=[7, 29, 15, 6, 10, 15],
        skiprows=1,
    )
    df.columns = ["Key", "Name", "DOB", "Round", "Home v Away", "Debut"]
    df = df.drop(columns=["Key"])
    df["DOB"] = df["DOB"].apply(pd.to_datetime)
    df["Debut"] = [pd.to_datetime(str(x).replace("*", "")) for x in df["Debut"]]
    if full_historical_data == True:
        full_player_DOB_Debuts = df[["Name", "DOB", "Debut"]]
        return full_player_DOB_Debuts
    else:
        full_player_DOB_Debuts = df[["Name", "DOB", "Debut"]][
            df["Debut"] > "2000-01-01"
        ].reset_index(drop=True)
        return full_player_DOB_Debuts


def addAgeColumns(season_df, year):
    # Adds DOB, Debut, Age, and Career Age columns to output for getFullPlayerStats

    DOB_df = getAllDOBAndDebuts()
    season_df = season_df.merge(DOB_df, left_on="Player", right_on="Name")
    cd = pd.to_datetime(f"31-12-{year}")
    season_df["Age"] = [
        (cd.year - born.year - ((cd.month, cd.day) < (born.month, born.day)))
        for born in season_df["DOB"]
    ]
    season_df["Career_Age"] = [
        (cd.year - debut.year) + 1 for debut in season_df["Debut"]
    ]
    return season_df


def getPlayerRankings(year: int, include_full_stats: bool = False):
    # Applies HPN Footy's ranking algorithim over the stats generated by getFullPlayerStats.

    FPS = getFullPlayerStats(year)
    FPS["OFF_Score"] = (
        FPS["GL"] * 6
        + FPS["BH"]
        + 0.25 * FPS["HO"]
        + 3 * FPS["GA"]
        + FPS["IF"]
        + FPS["MI"]
        + (FPS["FF"] - FPS["FA"])
    )
    FPS["MID_Score"] = (
        15 * FPS["IF"]
        + 20 * FPS["CL"]
        + 3 * FPS["TK"]
        + 1.5 * FPS["HO"]
        + (FPS["FF"] - FPS["FA"])
    )
    FPS["DEF_Score"] = (
        20 * FPS["RB"]
        + 12 * FPS["1%"]
        + (FPS["MK"] - 4 * FPS["MI"] + 2 * (FPS["FF"] - FPS["FA"]))
        - 0.66 * FPS["HO"]
    )
    if include_full_stats == False:
        return FPS[["Team", "Player", "OFF_Score", "MID_Score", "DEF_Score"]]
    elif include_full_stats == True:
        return FPS
